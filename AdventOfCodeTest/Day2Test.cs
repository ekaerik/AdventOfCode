using AdventOfCOde;
using FluentAssertions;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;

namespace AdventOfCodeTest
{
	[TestFixture]
	public class Day2Test
	{
		[Test]
		public void Should1()
		{
			var key = new Day2().Calculate("ULL".ToStringArray());

			key.Should().Be(1);
		}

		[Test]
		public void Should2()
		{
			var key = new Day2().Calculate("RRDDD".ToStringArray(), 0, 0);

			key.Should().Be(9);
		}

		[Test]
		public void Should3()
		{
			var key = new Day2().Calculate("LURDL".ToStringArray(), 2, 2);

			key.Should().Be(8);
		}

		[Test]
		public void Should4()
		{
			var key = new Day2().Calculate("UUUUD".ToStringArray(), 1, 2);

			key.Should().Be(5);
		}



		[Test]
		public void ShouldSolve()
		{
			var input1 = "LRULLRLDUUUDUDDDRLUDRDLDDLUUDLDDLRDRLDRLLURRULURLDRLDUDURLURRULLDDDUDDRRRDLRRDDLDURDULLRDLLLDRDLLDULDUDLLDLDRUDLLDLDDRRRDRLUDRDDLUDRRDUDUDLLDDUUDLRDUDRRUDUDRULRULUDRUUDLDLULLRLDLDDRULLRLLLULUULDURURLUUULDURLDDDURRUUDURDDDULDLURLRDRURDRUDRLLDLDRUURLLLRDRURUDLRLUDULLDDURLRURDLRDUUURRLULRRLDDULUUURLRRRLLLLLURDDRUULUDRRRUDDLLULRRUULDRDDULRLDDDRRUULUDRLRUDURUUULDLDULUUDURLLLRRDDRDLURDDDLDDDLRDRLDDURLRLLRUDRRLLDDDDDURDURRDDULDULLRULDRUURDRRDUDDUDDDDRRDULDUURDRUDRLDULRULURLLRRDRDRDLUUDRRLRLDULDDLUUUUUURRLRRRULLDDDRLRDRRRRRRRDUUDLLUDURUDDLURRUDL".ToStringArray();
			var input2 = "UDUUURRLRLLDDRRDRRRLDDDLURURLLUDDRLUUDRRRDURRLLRURDLLRRDUUDDDDRDRURRLLLLURDLRRRULLLDLLLUDDLDRRRDLDUUDDRDUDDUURDDLULULDURDURDRUULURURRURDUURUDRRUDRLLLLRRDLLDRDDRLLURDDDUDUDUDRUURDDRUURDLRUUDDRDUURUDDLLUURDLUDRUUDRRDLLUUURDULUULDUUDLLULUUDLUDRUUDUUURLDDDRLRURDDULLRDRULULUDLUUDDDUUDLDUUDRULLDUURDDRUDURULDRDDLRUULRRRDLDLRDULRDDRLLRRLURDLDRUDLRLUDLRLDLDURRUULRLUURDULDRRULLRULRDLLDLDUDRUDDUDLDDURDDDRDLUDRULRUULLRURLDDDRDLRRDRULURULDULRDLDULDURDRDRDRDURDRLUURLRDDLDDRLDDRURLLLURURDULDUDDLLUURDUUUDRUDDRDLDRLRLDURRULDULUUDDLRULDLRRRRDLLDRUUDRLLDLUDUULRDRDLRUUDLRRDDLUULDUULRUDRURLDDDURLRRULURR".ToStringArray();
			var input3 = "LDURLLLRLLLUURLLULDLRLLDLURULRULRDUDLDDUDRLRRDLULLDDULUUULDRLDURURLURLDLRUDULLLULDUURLLRDLUULRULLLULRDRULUDLUUULDDURLUDDUDDRDLDRDRUDLUURDDLULDUULURLUULRDRDLURUDRUDLDRLUUUUULUDUDRRURUDRULDLDRDRLRURUUDRDLULLUDLLRUUDUUDUDLLRRRLDUDDDRDUDLDLLULRDURULLLUDLLRUDDUUDRLDUULLDLUUDUULURURLLULDUULLDLUDUURLURDLUULRRLLRUDRDLLLRRRLDDLUULUURLLDRDLUUULLDUDLLLLURDULLRUDUUULLDLRLDRLLULDUDUDRULLRRLULURUURLRLURRLRRRDDRLUDULURUDRRDLUDDRRDRUDRUDLDDRLRDRRLDDRLLDDDULDLRLDURRRRRULRULLUUULUUUDRRDRDRLLURRRRUULUDDUDDDLDURDRLDLLLLLRDUDLRDRUULU".ToStringArray();
			var input4 = "URURRUUULLLLUURDULULLDLLULRUURRDRRLUULRDDRUDRRDUURDUDRUDDRUULURULDRLDRDDDLDLRLUDDRURULRLRLLLDLRRUDLLLLRLULDLUUDUUDRDLRRULLRDRLRLUUDDRRLLDDRULLLRLLURDLRRRRRLLDDRRDLDULDULLDLULLURURRLULRLRLLLLURDDRDDDUUDRRRDUUDDLRDLDRRLLRURUDUUUDLDUULLLRLURULRULRDRLLLDLDLRDRDLLLRUURDDUDDLULRULDLRULUURLLLRRLLLLLLRUURRLULRUUUDLDUDLLRRDDRUUUURRRDRRDULRDUUDULRRRDUUUUURRDUURRRRLDUDDRURULDDURDDRDLLLRDDURUDLLRURLRRRUDDLULULDUULURLUULRDLRDUDDRUULLLRURLDLRRLUDLULDRLUDDDRURUULLDLRLLLDULUDDRLRULURLRDRRDDLDLURUDDUUURRDDLUDDRDUULRRDLDRLLLULLRULRURULRLULULRDUD".ToStringArray();
			var input5 = "RUDLLUDRRDRRLRURRULRLRDUDLRRLRDDUDRDLRRLLRURRDDLRLLRRURULRUULDUDUULDULDLRLRDLRDLRUURLDRLUDRRDDDRDRRRDDLLLRRLULLRRDDUDULRDRDUURLDLRULULUDLLDRUDUURRUDLLRDRLRRUUUDLDUDRRULLDURRDUDDLRURDLDRLULDDURRLULLRDDDRLURLULDLRUDLURDURRUDULDUUDLLLDDDUUURRRDLLDURRDLULRULULLRDURULLURDRLLRUUDDRRUDRDRRRURUUDLDDRLDRURULDDLLULULURDLDLDULLRLRDLLUUDDUDUDDDDRURLUDUDDDRRUDDLUDULLRDLDLURDDUURDLRLUUDRRULLRDLDDDLDULDUDRDUUULULDULUDLULRLRUULLDURLDULDRDLLDULLLULRLRD".ToStringArray();

			var key1 = new Day2().Calculate(input1);
			var key2 = new Day2().Calculate(input2);
			var key3 = new Day2().Calculate(input3);
			var key4 = new Day2().Calculate(input4);
			var key5 = new Day2().Calculate(input5);

			Console.WriteLine($"{key1}{key2}{key3}{key4}{key5}");
		}

		[TestFixture]
		public class BackToBasicsTest
		{
			[Test]
			public void ShouldUp()
			{
				new Day2().Calculate("U".ToStringArray()).Should().Be(2);
			}

			[Test]
			public void ShouldRight()
			{
				new Day2().Calculate("R".ToStringArray()).Should().Be(6);
			}

			[Test]
			public void ShouldDown()
			{
				new Day2().Calculate("D".ToStringArray()).Should().Be(8);
			}


			[Test]
			public void ShouldLeft()
			{
				new Day2().Calculate("L".ToStringArray()).Should().Be(4);
			}

			[Test]
			public void ShouldUp2()
			{
				new Day2().Calculate("UU".ToStringArray()).Should().Be(2);
			}

			[Test]
			public void ShouldRight2()
			{
				new Day2().Calculate("RR".ToStringArray()).Should().Be(6);
			}

			[Test]
			public void ShouldDown2()
			{
				new Day2().Calculate("DD".ToStringArray()).Should().Be(8);
			}

			[Test]
			public void ShouldLeft2()
			{
				new Day2().Calculate("LL".ToStringArray()).Should().Be(4);
			}

			[Test]
			public void ShouldTraverse()
			{
				new Day2().Calculate("UULLDDDDDRRLU".ToStringArray()).Should().Be(5);
			}
		}
	}

	public static class StringExtensions
	{
		public static IEnumerable<string> ToStringArray(this string source)
		{
			return source.ToCharArray().Select(x => x.ToString());
		}
	}
}
